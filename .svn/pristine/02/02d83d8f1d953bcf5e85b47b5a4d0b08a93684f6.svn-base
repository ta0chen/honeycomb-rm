package com.polycom.honeycomb.rm.apitests;

import com.polycom.honeycomb.rm.booking.BookingOperations;
import com.polycom.honeycomb.rm.domain.Booking;
import com.polycom.honeycomb.rm.domain.Resource;
import com.polycom.honeycomb.rm.domain.ResourcePool;
import com.polycom.honeycomb.rm.domain.User;
import com.polycom.honeycomb.rm.pool.PoolOperations;
import com.polycom.honeycomb.rm.resource.ResourceOperations;
import com.polycom.honeycomb.rm.user.UserOperations;
import com.polycom.honeycomb.http.HttpException;
import jodd.http.HttpResponse;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.http.HttpStatus;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Created by Tao Chen on 2016/11/17.
 */
@RunWith(SpringJUnit4ClassRunner.class) @DirtiesContext
public class ResourceBookingTests {
    private String             host               = "localhost";
    private String             admin              = "admin";
    private String             password           = "Polycom321";
    private PoolOperations     poolOperations     = new PoolOperations(host);
    private UserOperations     userOperations     = new UserOperations(host);
    private ResourceOperations resourceOperations = new ResourceOperations(host);
    private BookingOperations  bookingOperations  = new BookingOperations(host);

    String rpdBookedId;
    String rpdAvailableId;
    String gsId;
    String pool1_admin = "pool1_admin";
    String pool1_user  = "pool1_user";
    String pool2_admin = "pool2_admin";
    String pool2_user  = "pool2_user";

    @Before public void setUp() {
        //admin create two pools
        HttpResponse response = poolOperations
                .createResourcePool(admin, password, "pool1", "pool1 desc");
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = poolOperations
                .createResourcePool(admin, password, "pool2", "pool2 desc");
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = userOperations.createUser(admin,
                                             password,
                                             pool1_admin,
                                             "pool1",
                                             "admin",
                                             "Polycom321",
                                             new String[] { "POOL_ADMIN" },
                                             new String[] { "pool1" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = userOperations.createUser(admin,
                                             password,
                                             pool1_user,
                                             "pool1",
                                             "admin",
                                             "Polycom321",
                                             new String[] { "POOL_USER" },
                                             new String[] { "pool1" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = userOperations.createUser(admin,
                                             password,
                                             pool2_admin,
                                             "pool2",
                                             "admin",
                                             "Polycom321",
                                             new String[] { "POOL_ADMIN" },
                                             new String[] { "pool2" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = userOperations.createUser(admin,
                                             password,
                                             pool2_user,
                                             "pool2",
                                             "admin",
                                             "Polycom321",
                                             new String[] { "POOL_USER" },
                                             new String[] { "pool2" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        //pool admin create resources and assign them to different pools
        Map<String, Object> rpdBookedInfos = new HashMap<String, Object>();
        rpdBookedInfos.put("ip", "1.1.1.1");
        rpdBookedInfos.put("port", "2323");

        response = resourceOperations
                .createResource(pool1_admin, password, "RpdWin", new String[] {
                        "rprm" }, "pool1", rpdBookedInfos);
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        Map<String, Object> rpdAvailInfos = new HashMap<String, Object>();
        rpdAvailInfos.put("ip", "3.3.3.3");
        rpdAvailInfos.put("port", "2323");

        response = resourceOperations
                .createResource(pool1_admin, password, "RpdWin", new String[] {
                        "" }, "pool1", rpdAvailInfos);
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        Map<String, Object> gsInfos = new HashMap<String, Object>();
        gsInfos.put("ip", "2.2.2.2");
        gsInfos.put("port", "24");
        response = resourceOperations.createResource(pool2_admin,
                                                     password,
                                                     "GroupSeries",
                                                     new String[] {
                                                             "rpd" },
                                                     "pool2",
                                                     gsInfos);
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        //pool admin search the resources in its pool
        List<Resource> resources = resourceOperations
                .getResource(pool1_admin, password);

        Optional<Resource> foundResource = resources.stream()
                .filter(x -> rpdBookedInfos.get("ip")
                        .equals(x.getInfos().get("ip"))).findAny();
        //check if pool1_admin can get the resource in its pool
        assertTrue(foundResource.isPresent());
        rpdBookedId = foundResource.get().getId();

        foundResource = resources.stream().filter(x -> rpdAvailInfos.get("ip")
                .equals(x.getInfos().get("ip"))).findAny();
        //check if pool1_admin can get the resource in its pool
        assertTrue(foundResource.isPresent());
        rpdAvailableId = foundResource.get().getId();

        resources = resourceOperations.getResource(pool2_admin, password);

        foundResource = resources.stream()
                .filter(x -> gsInfos.get("ip").equals(x.getInfos().get("ip")))
                .findAny();
        //check if pool1_admin can get the resource in its pool
        assertTrue(foundResource.isPresent());
        gsId = foundResource.get().getId();
    }

    @Test public void poolAdminCanBookResource() {
        HttpResponse response = bookingOperations.bookingResource(pool1_admin,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());
    }

    @Test public void poolUserCanBookResource() {
        HttpResponse response = bookingOperations.bookingResource(pool1_user,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());
    }

    @Test(expected = HttpException.class)
    public void poolAdminCannotBookResourceInOtherPool() {
        bookingOperations.bookingResource(pool1_admin,
                                          password,
                                          "GroupSeries",
                                          "pool2",
                                          new String[] {
                                                  "rpd" });
    }

    @Test(expected = HttpException.class)
    public void poolUserCannotBookResourceInOtherPool() {
        bookingOperations.bookingResource(pool1_user,
                                          password,
                                          "GroupSeries",
                                          "pool2",
                                          new String[] {
                                                  "rpd" });
    }

    @Test public void poolAdminCannotOverBooking() throws Exception {
        HttpResponse response = bookingOperations.bookingResource(pool1_admin,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        try {
            bookingOperations.bookingResource(pool1_admin,
                                              password,
                                              "RpdWin",
                                              "pool1",
                                              new String[] {
                                                      "rprm" });
        } catch (Exception e) {
            assertEquals(e.getClass(), HttpException.class);
        }
    }

    @Test public void poolUserCannotOverBooking() throws Exception {
        HttpResponse response = bookingOperations.bookingResource(pool1_user,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        try {
            bookingOperations.bookingResource(pool1_user,
                                              password,
                                              "RpdWin",
                                              "pool1",
                                              new String[] {
                                                      "rprm" });
        } catch (Exception e) {
            assertEquals(e.getClass(), HttpException.class);
        }
    }

    @Test public void poolAdminBookResourceWithoutKeywords() {
        HttpResponse response = bookingOperations.bookingResource(pool1_admin,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = bookingOperations.bookingResource(pool1_admin,
                                                     password,
                                                     "RpdWin",
                                                     "pool1",
                                                     new String[] {
                                                             "" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());
    }

    @Test public void poolUserBookResourceWithoutKeywords() {
        HttpResponse response = bookingOperations.bookingResource(pool1_user,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        response = bookingOperations.bookingResource(pool1_user,
                                                     password,
                                                     "RpdWin",
                                                     "pool1",
                                                     new String[] {
                                                             "" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());
    }

    @Test public void poolAdminCanBookReleasedResource() throws Exception {
        HttpResponse response = bookingOperations.bookingResource(pool1_admin,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        List<Booking> bookingList = bookingOperations
                .getResourceBookingList(pool1_admin, password);
        Optional<Booking> foundBooking = bookingList.stream()
                .filter(x -> Arrays.asList(x.getResource().getKeywords())
                        .containsAll(Arrays.asList(new String[] {
                                "rprm" }))).findAny();
        assertTrue(foundBooking.isPresent());
        assertEquals(pool1_admin, foundBooking.get().getResource().getOwner());

        try {
            bookingOperations.bookingResource(pool1_admin,
                                              password,
                                              "RpdWin",
                                              "pool1",
                                              new String[] {
                                                      "rprm" });
        } catch (Exception e) {
            assertEquals(e.getClass(), HttpException.class);
        }

        //Release the booked resource
        response = bookingOperations.releaseResourceBooking(pool1_admin,
                                                            password,
                                                            foundBooking.get()
                                                                    .getId());
        assertEquals(HttpStatus.NO_CONTENT.value(), response.statusCode());

        //booking again
        response = bookingOperations.bookingResource(pool1_admin,
                                                     password,
                                                     "RpdWin",
                                                     "pool1",
                                                     new String[] {
                                                             "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());
    }

    @Test public void poolUserCanBookReleasedResource() throws Exception {
        HttpResponse response = bookingOperations.bookingResource(pool1_user,
                                                                  password,
                                                                  "RpdWin",
                                                                  "pool1",
                                                                  new String[] {
                                                                          "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());

        List<Booking> bookingList = bookingOperations
                .getResourceBookingList(pool1_user, password);
        Optional<Booking> foundBooking = bookingList.stream()
                .filter(x -> Arrays.asList(x.getResource().getKeywords())
                        .containsAll(Arrays.asList(new String[] {
                                "rprm" }))).findAny();
        assertTrue(foundBooking.isPresent());
        assertEquals(pool1_user, foundBooking.get().getResource().getOwner());

        try {
            bookingOperations.bookingResource(pool1_user,
                                              password,
                                              "RpdWin",
                                              "pool1",
                                              new String[] {
                                                      "rprm" });
        } catch (Exception e) {
            assertEquals(e.getClass(), HttpException.class);
        }

        //Release the booked resource
        response = bookingOperations.releaseResourceBooking(pool1_user,
                                                            password,
                                                            foundBooking.get()
                                                                    .getId());
        assertEquals(HttpStatus.NO_CONTENT.value(), response.statusCode());

        //booking again
        response = bookingOperations.bookingResource(pool1_user,
                                                     password,
                                                     "RpdWin",
                                                     "pool1",
                                                     new String[] {
                                                             "rprm" });
        assertEquals(HttpStatus.CREATED.value(), response.statusCode());
    }

    @After public void tearDown() {
        //remove the resource
        HttpResponse response = resourceOperations
                .deleteResource(pool1_admin, password, rpdBookedId);
        assertEquals(HttpStatus.NO_CONTENT.value(), response.statusCode());

        response = resourceOperations
                .deleteResource(pool1_admin, password, rpdAvailableId);
        assertEquals(HttpStatus.NO_CONTENT.value(), response.statusCode());

        response = resourceOperations
                .deleteResource(pool2_admin, password, gsId);
        assertEquals(HttpStatus.NO_CONTENT.value(), response.statusCode());

        //remove the pool1 and pool2
        List<ResourcePool> totalPools = poolOperations
                .getResourcePool(admin, password);
        for (ResourcePool pool : totalPools) {
            if (!pool.getName().equals("default")) {
                response = poolOperations
                        .deleteResourcePool(admin, password, pool.getId());
                assertEquals(HttpStatus.NO_CONTENT.value(),
                             response.statusCode());
            }
        }

        //remove the users
        List<User> totalUsers = userOperations.getUsers(admin, password);
        for (User user : totalUsers) {
            if (!user.getUserName().equals("admin")) {
                response = userOperations
                        .deleteUser(admin, password, user.getId());
                assertEquals(HttpStatus.NO_CONTENT.value(),
                             response.statusCode());
            }
        }
    }
}
